{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-name-shadowing #-}
module MiniC.Print where

-- pretty-printer generated by the BNF converter

import MiniC.Abs
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))


instance Print TIdent where
  prt _ (TIdent i) = doc (showString ( i))



instance Print Prg where
  prt i e = case e of
    PPrg defs -> prPrec i 0 (concatD [prt 0 defs])

instance Print Dec where
  prt i e = case e of
    Dec qtyp id arrs -> prPrec i 0 (concatD [prt 0 qtyp, prt 0 id, prt 0 arrs])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Def where
  prt i e = case e of
    DDef dec decs stms -> prPrec i 0 (concatD [prt 0 dec, doc (showString "("), prt 0 decs, doc (showString ")"), doc (showString "{"), prt 0 stms, doc (showString "}")])
    DSig dec decs -> prPrec i 0 (concatD [prt 0 dec, doc (showString "("), prt 0 decs, doc (showString ")"), doc (showString ";")])
    DDec dec -> prPrec i 0 (concatD [prt 0 dec, doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Typ where
  prt i e = case e of
    TName tident -> prPrec i 0 (concatD [prt 0 tident])
    TStr flds -> prPrec i 0 (concatD [doc (showString "struct"), doc (showString "{"), prt 0 flds, doc (showString "}")])
    TUni flds -> prPrec i 0 (concatD [doc (showString "union"), doc (showString "{"), prt 0 flds, doc (showString "}")])
    TEnum enms -> prPrec i 0 (concatD [doc (showString "enum"), doc (showString "{"), prt 0 enms, doc (showString "}")])
    TVoid -> prPrec i 0 (concatD [doc (showString "void")])
    TPtr typ -> prPrec i 0 (concatD [prt 0 typ, doc (showString "*")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Enm where
  prt i e = case e of
    EEnm id -> prPrec i 0 (concatD [prt 0 id])
    ECst id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 2 exp])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Fld where
  prt i e = case e of
    FFld typ id arrs -> prPrec i 0 (concatD [prt 0 typ, prt 0 id, prt 0 arrs])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Arr where
  prt i e = case e of
    AArr exp -> prPrec i 0 (concatD [doc (showString "["), prt 0 exp, doc (showString "]")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print QTyp where
  prt i e = case e of
    QTyp qual typ -> prPrec i 0 (concatD [prt 0 qual, prt 0 typ])

instance Print Qual where
  prt i e = case e of
    NoQual -> prPrec i 0 (concatD [])
    QConst -> prPrec i 0 (concatD [doc (showString "const")])

instance Print Stm where
  prt i e = case e of
    SDec dec init -> prPrec i 0 (concatD [prt 0 dec, prt 0 init])
    SPut lval exp -> prPrec i 0 (concatD [prt 0 lval, doc (showString "="), prt 0 exp])
    SFor stm1 exp stm2 stms -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 stm1, doc (showString ";"), prt 0 exp, doc (showString ";"), prt 0 stm2, doc (showString ")"), doc (showString "{"), prt 0 stms, doc (showString "}")])
    SSwi exp branchs -> prPrec i 0 (concatD [doc (showString "switch"), doc (showString "("), prt 0 exp, doc (showString ")"), doc (showString "{"), prt 0 branchs, doc (showString "}")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Branch where
  prt i e = case e of
    Case exp stms -> prPrec i 0 (concatD [doc (showString "case"), prt 2 exp, doc (showString ":"), prt 0 stms, doc (showString "break"), doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Init where
  prt i e = case e of
    NoInit -> prPrec i 0 (concatD [])
    SoInit exp -> prPrec i 0 (concatD [doc (showString "="), prt 0 exp])

instance Print Literal where
  prt i e = case e of
    LInteger n -> prPrec i 0 (concatD [prt 0 n])
    LDouble d -> prPrec i 0 (concatD [prt 0 d])
    LString str -> prPrec i 0 (concatD [prt 0 str])
    LChar c -> prPrec i 0 (concatD [prt 0 c])

instance Print UOp where
  prt i e = case e of
    UAmp -> prPrec i 0 (concatD [doc (showString "&")])
    UPtr -> prPrec i 0 (concatD [doc (showString "*")])
    UPlus -> prPrec i 0 (concatD [doc (showString "+")])
    UMinus -> prPrec i 0 (concatD [doc (showString "-")])
    UTilde -> prPrec i 0 (concatD [doc (showString "~")])
    UBang -> prPrec i 0 (concatD [doc (showString "!")])

instance Print Exp where
  prt i e = case e of
    EVar id -> prPrec i 16 (concatD [prt 0 id])
    ELit literal -> prPrec i 16 (concatD [prt 0 literal])
    EParen exp -> prPrec i 16 (concatD [doc (showString "("), prt 0 exp, doc (showString ")")])
    EArw exp id -> prPrec i 15 (concatD [prt 15 exp, doc (showString "->"), prt 0 id])
    EFld exp id -> prPrec i 15 (concatD [prt 15 exp, doc (showString "."), prt 0 id])
    EArr exp1 exp2 -> prPrec i 15 (concatD [prt 15 exp1, doc (showString "["), prt 0 exp2, doc (showString "]")])
    EApp exp exps -> prPrec i 15 (concatD [prt 15 exp, doc (showString "("), prt 0 exps, doc (showString ")")])
    UOp uop exp -> prPrec i 14 (concatD [prt 0 uop, prt 13 exp])
    Mul exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "*"), prt 13 exp2])
    Div exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "/"), prt 13 exp2])
    Mod exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "%"), prt 13 exp2])
    Add exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "+"), prt 12 exp2])
    Sub exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "-"), prt 12 exp2])
    Lsl exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString "<<"), prt 11 exp2])
    Lsr exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString ">>"), prt 11 exp2])
    Lt exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "<"), prt 10 exp2])
    Gt exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString ">"), prt 10 exp2])
    Le exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "<="), prt 10 exp2])
    Ge exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString ">="), prt 10 exp2])
    Eq exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "=="), prt 9 exp2])
    NEq exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "!="), prt 9 exp2])
    And exp1 exp2 -> prPrec i 7 (concatD [prt 7 exp1, doc (showString "&"), prt 8 exp2])
    Xor exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "^"), prt 7 exp2])
    Ior exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "|"), prt 6 exp2])
    Land exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "&&"), prt 5 exp2])
    Lor exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "||"), prt 4 exp2])
    Cond exp1 exp2 exp3 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "?"), prt 0 exp2, doc (showString ":"), prt 2 exp3])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print LVal where
  prt i e = case e of
    LVar id -> prPrec i 3 (concatD [prt 0 id])
    LArw lval id -> prPrec i 2 (concatD [prt 2 lval, doc (showString "->"), prt 0 id])
    LFld lval id -> prPrec i 2 (concatD [prt 2 lval, doc (showString "."), prt 0 id])
    LArr lval exp -> prPrec i 2 (concatD [prt 2 lval, doc (showString "["), prt 0 exp, doc (showString "]")])
    LPtr lval -> prPrec i 0 (concatD [doc (showString "*"), prt 2 lval])

