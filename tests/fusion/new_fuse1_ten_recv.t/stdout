
{- Sequential Fused program -}

new_ann_ten_recv =
  \ (ann : Allocation)-> proc ()
  new/ann [c : [!Int, ?Int],d : {?Int, !Int}].
  ( split c [co, ci].
    ( co <- 42
    | let y : Int <- ci )
  | split d {di, do}.
    let x : Int <- di.
    do <- (x + x))

new_fuse1_ten_recv =
  proc ()
  new/fuse 0 [co, di].
  new/fuse 0 [ci, do].
  co <- 42.
  let x : Int <- di.
  do <- (x + x).
  let y : Int <- ci

new_fuse2_ten_recv =
  proc ()
  let x : Int = 42.
  new/fuse 0 [co, di].
  let y : Int = (x + x).
  new/fuse 0 [do, ci]

new_fuse3_ten_recv =
  proc ()
  let x : Int = 42.
  let y : Int = (x + x)

new_fused_ten_recv =
  proc ()
  let x : Int = 42.
  let y : Int = (x + x)
