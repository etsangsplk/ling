
{- Sequential Expanded program -}

assert
  'a'
  =
  'a' : Char

ap =
  \ (S : Session)-> \ (T : Session)-> proc (c : {[S, ~ T],{~ S, T}})
  split c {f, xo}.
  split xo {x, o}.
  split f [fi, fo].
  ( fwd S (fi, x)
  | fwd T (o, fo))

ap_SInt_SBool =
  proc (c : {[!Int, ?Bool],{?Int, !Bool}})
  split c {f, xo}.
  split xo {x, o}.
  split f [fi, fo].
  fwd (!Int)(fi, x).
  fwd (!Bool)(o, fo)

assert
  `false
  =
  `false : Bool

assert
  \ (x : Bool)-> x
  =
  \ (y : Bool)-> y : (b : Bool)-> Bool

assert
  not `true
  =
  `false : Bool

assert
  proc (r : ?Bool.!Bool)
  let x : Bool <- r.
  r <- x
  =
  proc (r : ?Bool.!Bool)
  let y : Bool <- r.
  r <- y : < ?Bool.!Bool >

assert
  proc (r : !Bool)
  r <- (not `true)
  =
  proc (r : !Bool)
  r <- `false : < !Bool >

another_not : (x : Bool)-> Bool =
  \ (x : Bool)-> case x of {
    `false -> `true ,
    `true -> `false
  }

pnot =
  proc (c : ?Bool.!Bool)
  let x : Bool <- c.
  c <- (case x of {
    `false -> `true ,
    `true -> `false
  } )

if : (b : Bool)-> (A : Type)-> (t : A)-> (e : A)-> A =
  \ (b : Bool)-> \ (A : Type)-> \ (t : A)-> \ (e : A)-> case b of {
    `false -> e ,
    `true -> t
  }

If : (b : Bool)-> (A : Type)-> (B : Type)-> (t : A)-> (e : B)-> case b of {
    `false -> B ,
    `true -> A
  } =
  \ (b : Bool)-> \ (A : Type)-> \ (B : Type)-> \ (t : A)-> \ (e : B)-> case b of {
    `false -> e ,
    `true -> t
  }

case_con : case `true of {
    `false -> Bool ,
    `true -> Int
  } =
  1

com_new =
  \ (S : Session)-> \ (p : < S >)-> \ (q : < ~ S >)-> proc ()
  new [c : S, d : ~ S].
  ( @ p (c)
  | @ q (d))

com_new_SInt =
  proc ()
  new [c : !Int, d : ?Int].
  c <- 42.
  let x#q : Int <- d

com_new_mk_ten2 =
  \ (S : Session)-> \ (p : < S >)-> \ (q : < ~ S >)-> proc ()
  new [c : S, d : ~ S].
  @ (proc (c : [S, ~ S])
  split c [c0, c1].
  ( @ p (c0)
  | @ q (c1))) [c, d]

conv_fun =
  \ (A : Type)-> \ (A' : Type)-> \ (B : Type)-> \ (S : Session)-> \ (dom : A' -> A)-> \ (cod : B -> < S >)-> \ (f : A -> B)-> proc (c : {?A', S})
  split c {i, o}.
  let p : A' <- i.
  @ (cod (f (dom p)))(o)

curry =
  \ (S : Session)-> \ (T : Session)-> \ (U : Session)-> proc (c : {[[S, T],~ U],{~ S, {~ T, U}}})
  split c {f, xyo}.
  split xyo {x, yo}.
  split yo {y, o}.
  split f [fxy, fo].
  split fxy [fx, fy].
  ( fwd S (fx, x)
  | fwd T (fy, y)
  | fwd U (o, fo))

curry_SInt_SBool_SDouble =
  proc (c : {[[!Int, !Bool],?Double],{?Int, {?Bool, !Double}}})
  split c {f, xyo}.
  split xyo {x, yo}.
  split yo {y, o}.
  split f [fxy, fo].
  split fxy [fx, fy].
  fwd (!Int)(fx, x).
  fwd (!Bool)(fy, y).
  fwd (!Double)(o, fo)

cutEmptyParTensor =
  proc ()
  new [c : {}, d : []].
  split c {}.
  split d []

cut_par_cut =
  proc ()
  new [c : !Int, d : ?Int].
  new [c' : !Int, d' : ?Int].
  c <- 1.
  let x : Int <- d.
  c' <- 1.
  let x' : Int <- d'

cut_recv_send_send_recv =
  proc ()
  new [d : ?Int.!Int, c : !Int.?Int].
  c <- 1.
  let y : Int <- d.
  d <- 2.
  let x : Int <- c

cutSendRecv =
  proc ()
  new [c : !Int, d : ?Int].
  c <- 1.
  let x : Int <- d

cut_send_recv_recv_send =
  proc ()
  new [c : !Int.?Int, d : ?Int.!Int].
  c <- 1.
  let y : Int <- d.
  d <- 2.
  let x : Int <- c

cut_send_recv_recv_send_v2 =
  proc ()
  new [c : !Int.?Int, d : ?Int.!Int].
  c <- 1.
  let y : Int <- d.
  d <- 2.
  let x : Int <- c

cut_send_recv_recv_send_with_log =
  proc (logc : !String.!String, logd : !String.!String)
  new [c : !Int.?Int, d : ?Int.!Int].
  logd <- "recv d".
  logc <- "send c 1".
  c <- 1.
  let y : Int <- d.
  logc <- "recv c".
  logd <- "send d 2".
  d <- 2.
  let x : Int <- c

cut_send_recv_recv_send_with_log_prll =
  proc (logc : !String.!String, logd : !String.!String)
  new [c : !Int.?Int, d : ?Int.!Int].
  logd <- "recv d".
  logc <- "send c 1".
  c <- 1.
  let y : Int <- d.
  logc <- "recv c".
  logd <- "send d 2".
  d <- 2.
  let x : Int <- c

dep_fun_server =
  \ (A : Type)-> \ (B : (x : A)-> Type)-> \ (f : (x : A)-> B x)-> proc (c : ?(x : A).!B x)
  let x : A <- c.
  c <- (f x)

div_mod_server_cont =
  proc (c : ?Int.?Int.!Int.!Int)
  let m : Int <- c.
  let n : Int <- c.
  c <- (m / n).
  c <- (m % n)

div_mod_server_explicit_prll =
  proc (rm : ?Int, rn : ?Int, sdiv : !Int, smod : !Int)
  let n : Int <- rn.
  let m : Int <- rm.
  sdiv <- (m / n).
  smod <- (m % n)

div_mod_server_par2_ten2_ten2 =
  proc (r : [?Int, ?Int],s : [!Int, !Int])
  split r [rm, rn].
  split s [sdiv, smod].
  let m : Int <- rm.
  let n : Int <- rn.
  sdiv <- (m / n).
  smod <- (m % n)

div_mod_server_par4 =
  proc (c : {?Int, ?Int, !Int, !Int})
  split c {rm, rn, sdiv, smod}.
  let m : Int <- rm.
  let n : Int <- rn.
  sdiv <- (m / n).
  smod <- (m % n)

div_mod_server_seq2_ten2_ten2 =
  proc (c : [: [?Int, ?Int],[!Int, !Int]:])
  split c [: r, s :].
  split r [rm, rn].
  split s [sdiv, smod].
  let m : Int <- rm.
  let n : Int <- rn.
  sdiv <- (m / n).
  smod <- (m % n)

div_mod_server_seq4 =
  proc (c : [: ?Int, ?Int, !Int, !Int :])
  split c [: rm, rn, sdiv, smod :].
  let m : Int <- rm.
  let n : Int <- rn.
  sdiv <- (m / n).
  smod <- (m % n)

div_mod_server_simple =
  proc (rm : ?Int, rn : ?Int, sdiv : !Int, smod : !Int)
  let m : Int <- rm.
  let n : Int <- rn.
  sdiv <- (m / n).
  smod <- (m % n)

double =
  proc (a : ?Int, b : !Int)
  let x : Int <- a.
  b <- (x + x)

double_21 =
  proc (b : !Int)
  new [: c : !Int, c' : ?Int :].
  c <- 21.
  let x : Int <- c'.
  b <- (x + x)

double_21_fused =
  proc (b : !Int)
  b <- 42

double_21_fused_and_reduced =
  proc (b : !Int)
  b <- 42

another_dual =
  \ (S : Session)-> ~ S

dual_dual =
  \ (S : Session)-> \ (p : < S >)-> proc (c : S)
  @ p (c)

send_42 =
  proc (c : !Int)
  c <- 42

embed_send_42 =
  proc (c : !Int)
  c <- 42

my_zero =
  0

assert
  (S : Session)-> (T : Session)-> < S ^ 5, T ^ (0 + my_zero)>
  =
  (S : Session)-> (T : Session)-> < S ^ 2, T ^ 0, S, S, S > : Type

assert
  (S : Session)-> (m : Int)-> (n : Int)-> < S ^ (m + n)>
  =
  (S : Session)-> (m : Int)-> (n : Int)-> < S ^ m, S ^ n > : Type

fake_div_mod_server_ten2 =
  proc (r : [?Int, ?Int],s : [!Int, !Int])
  split r [rm, rn].
  split s [sdiv, smod].
  sdiv <- 42.
  smod <- 21.
  let m : Int <- rm.
  let n : Int <- rn

feed_fwd_send_then_recv =
  \ (I : Type)-> \ (O : Type)-> \ (i : I)-> \ (f : (x : I)-> O)-> \ (p : < {!I.?O, ?I.!O}>)-> proc ()
  new [a : {!I.?O, ?I.!O},b : [?I.!O, !I.?O]].
  ( @ p (a)
  | split b [c, d].
    ( let x : I <- c.
      c <- (f x)
    | d <- i.
      let o : O <- d ))

feed_fwd_send_then_recv_Int_String_42_showInt =
  proc ()
  new [a : {!Int.?String, ?Int.!String},b : [?Int.!String, !Int.?String]].
  split a {c#0#p : !Int.?String, c#1#p : ?Int.!String}.
  split b [c, d].
  d <- 42.
  let x#c#1#p : Int <- c#1#p.
  c#0#p <- x#c#1#p.
  let x : Int <- c.
  c <- (showInt x).
  let x#c#0#p : String <- c#0#p.
  c#1#p <- x#c#0#p.
  let o : String <- d

feed_recv =
  \ (p : < ?Int >)-> \ (i : Int)-> proc ()
  new [c : ?Int, d].
  ( @ p (c)
  | d <- i )

feed_send =
  \ (p : < !Int >)-> proc ()
  new [c : !Int, d].
  ( @ p (c)
  | let x : Int <- d )

feed_send_par_recv =
  \ (p : < {!Int, ?Int}>)-> \ (n : Int)-> proc ()
  new [c : {!Int, ?Int},d : [?Int, !Int]].
  ( @ p (c)
  | split d [i, o].
    ( let x : Int <- i
    | o <- n ))

feed_send_ten_recv =
  \ (p : < [!Int, ?Int]>)-> \ (f : (x : Int)-> Int)-> proc ()
  new [c : [!Int, ?Int],d : {?Int, !Int}].
  ( @ p (c)
  | split d {i, o}.
    let x : Int <- i.
    o <- (f x))

feed_send_then_recv =
  \ (p : < !Int.?Int >)-> \ (f : (x : Int)-> Int)-> proc ()
  new [c : !Int.?Int, d].
  ( @ p (c)
  | let x : Int <- d.
    d <- (f x))

flexible_telescope : (A : Type)-> (B : Type)-> (x : A)-> (y : A)-> (z : B)-> (t : B)-> Int =
  \ (A : Type)-> \ (B : Type)-> \ (x : A)-> \ (y : A)-> \ (z : B)-> \ (t : B)-> 42

fun1_to_proc_ord =
  \ (I : Type)-> \ (O : Type)-> \ (f : (x : I)-> O)-> proc (c : [: ?I, !O :])
  split c [: i, o :].
  let x : I <- i.
  o <- (f x)

fun1_to_proc_par2 =
  \ (I : Type)-> \ (O : Type)-> \ (f : (x : I)-> O)-> proc (i : ?I, o : !O)
  let x : I <- i.
  o <- (f x)

fun1_to_proc_seq =
  \ (I : Type)-> \ (O : Type)-> \ (f : (x : I)-> O)-> proc (c : ?I.!O)
  let x : I <- c.
  c <- (f x)

fwd0_snd0 =
  proc (c : {})
  split c {}

fwd1_rcv =
  proc (c : {?Int})
  split c {c#0 : ?Int}.
  let x#c#0 : Int <- c#0

fwd2_par2_ten2 =
  proc (c : {{?Int, !Int.?Int},[!Int, ?Int.!Int]})
  split c {c#0 : {?Int, !Int.?Int},c#1 : [!Int, ?Int.!Int]}.
  split c#0 {c#0#0 : ?Int, c#0#1 : !Int.?Int}.
  split c#1 [c#1#0 : !Int, c#1#1 : ?Int.!Int].
  let x#c#0#0 : Int <- c#0#0.
  let x#c#1#1 : Int <- c#1#1.
  c#1#0 <- x#c#0#0.
  c#0#1 <- x#c#1#1.
  let x#c#0#1 : Int <- c#0#1.
  c#1#1 <- x#c#0#1

fwd3_par2_ten2_ten2 =
  proc (c : {{?Int, !Int.?Int},[!Int, ?Int.!Int],{!Int, !Int.!Int}})
  split c {c#0 : {?Int, !Int.?Int},c#1 : [!Int, ?Int.!Int],c#2 : {!Int, !Int.!Int}}.
  split c#0 {c#0#0 : ?Int, c#0#1 : !Int.?Int}.
  split c#1 [c#1#0 : !Int, c#1#1 : ?Int.!Int].
  split c#2 {c#2#0 : !Int, c#2#1 : !Int.!Int}.
  let x#c#0#0 : Int <- c#0#0.
  let x#c#1#1 : Int <- c#1#1.
  c#1#0 <- x#c#0#0.
  c#2#0 <- x#c#0#0.
  c#0#1 <- x#c#1#1.
  c#2#1 <- x#c#1#1.
  let x#c#0#1 : Int <- c#0#1.
  c#1#1 <- x#c#0#1.
  c#2#1 <- x#c#0#1

fwd3_seq2_seq2_seq2 =
  proc (c : {[: ?Int, !Int.?Int :], [: !Int, ?Int.!Int :], [: !Int, !Int.!Int :]})
  split c {c#0 : [: ?Int, !Int.?Int :], c#1 : [: !Int, ?Int.!Int :], c#2 : [: !Int, !Int.!Int :]}.
  split c#0 [: c#0#0 : ?Int, c#0#1 : !Int.?Int :].
  split c#1 [: c#1#0 : !Int, c#1#1 : ?Int.!Int :].
  split c#2 [: c#2#0 : !Int, c#2#1 : !Int.!Int :].
  let x#c#0#0 : Int <- c#0#0.
  c#1#0 <- x#c#0#0.
  c#2#0 <- x#c#0#0.
  let x#c#1#1 : Int <- c#1#1.
  c#0#1 <- x#c#1#1.
  c#2#1 <- x#c#1#1.
  let x#c#0#1 : Int <- c#0#1.
  c#1#1 <- x#c#0#1.
  c#2#1 <- x#c#0#1

fwd_par0_ten0 =
  proc (i : {}, o : [])
  split i {}.
  split o []

fwd_par2_ten2_expanded =
  proc (i : {?Int, !Int.?Int},o : [!Int, ?Int.!Int])
  split o [o0, o1].
  split i {i0, i1}.
  let xi0 : Int <- i0.
  let xo1 : Int <- o1.
  o0 <- xi0.
  i1 <- xo1.
  let xi1 : Int <- i1.
  o1 <- xi1

fwd_par2_ten2 =
  proc (i : {?Int, !Int.?Int},o : [!Int, ?Int.!Int])
  split i {i#0 : ?Int, i#1 : !Int.?Int}.
  split o [o#0 : !Int, o#1 : ?Int.!Int].
  let x#i#0 : Int <- i#0.
  let x#o#1 : Int <- o#1.
  o#0 <- x#i#0.
  i#1 <- x#o#1.
  let x#i#1 : Int <- i#1.
  o#1 <- x#i#1

fwd_par2_ten2_ten2 =
  proc (i : {?Int, !Int.?Int},o : [!Int, ?Int.!Int],l : {!Int, !Int.!Int})
  split i {i#0 : ?Int, i#1 : !Int.?Int}.
  split o [o#0 : !Int, o#1 : ?Int.!Int].
  split l {l#0 : !Int, l#1 : !Int.!Int}.
  let x#i#0 : Int <- i#0.
  let x#o#1 : Int <- o#1.
  o#0 <- x#i#0.
  l#0 <- x#i#0.
  i#1 <- x#o#1.
  l#1 <- x#o#1.
  let x#i#1 : Int <- i#1.
  o#1 <- x#i#1.
  l#1 <- x#i#1

fwd_par2_ten2_ten2_ten2 =
  proc (i : {?Int, !Int.?Int},o : [!Int, ?Int.!Int],l : {!Int, !Int.!Int},m : {!Int, !Int.!Int})
  split i {i#0 : ?Int, i#1 : !Int.?Int}.
  split o [o#0 : !Int, o#1 : ?Int.!Int].
  split l {l#0 : !Int, l#1 : !Int.!Int}.
  split m {m#0 : !Int, m#1 : !Int.!Int}.
  let x#i#0 : Int <- i#0.
  let x#o#1 : Int <- o#1.
  o#0 <- x#i#0.
  l#0 <- x#i#0.
  m#0 <- x#i#0.
  i#1 <- x#o#1.
  l#1 <- x#o#1.
  m#1 <- x#o#1.
  let x#i#1 : Int <- i#1.
  o#1 <- x#i#1.
  l#1 <- x#i#1.
  m#1 <- x#i#1

fwd_send_recv =
  proc (i : ?Int, o : !Int)
  let x#i : Int <- i.
  o <- x#i

fwd_send_recv_recv_auto =
  proc (c : !Int.?Int.?Int, d : ?Int.!Int.!Int)
  let x#d : Int <- d.
  c <- x#d.
  let x#c : Int <- c.
  d <- x#c.
  let y#c : Int <- c.
  d <- y#c

fwd_send_recv_recv_manually =
  proc (c : !Int.?Int.?Int, d : ?Int.!Int.!Int)
  let x : Int <- d.
  c <- x.
  let y : Int <- c.
  d <- y.
  let z : Int <- c.
  d <- z

fwd_send_recv_recv_send =
  proc (i : ?Int.!Int, o : !Int.?Int)
  let x#i : Int <- i.
  o <- x#i.
  let x#o : Int <- o.
  i <- x#o

fwd_send_recv_recv_with_listener_auto =
  proc (c : !Int.?Int.?Int, d : ?Int.!Int.!Int, e : !Int.!Int.!Int)
  let x#d : Int <- d.
  c <- x#d.
  e <- x#d.
  let x#c : Int <- c.
  d <- x#c.
  e <- x#c.
  let y#c : Int <- c.
  d <- y#c.
  e <- y#c

fwd_send_recv_recv_with_listener_manually =
  proc (c : !Int.?Int.?Int, d : ?Int.!Int.!Int, e : !Int.!Int.!Int)
  let x : Int <- d.
  c <- x.
  e <- x.
  let y : Int <- c.
  d <- y.
  e <- y.
  let z : Int <- c.
  d <- z.
  e <- z

fwd_seq2_seq2_seq2 =
  proc (i : [: ?Int, !Int.?Int :], o : [: !Int, ?Int.!Int :], l : [: !Int, !Int.!Int :])
  split i [: i#0 : ?Int, i#1 : !Int.?Int :].
  split o [: o#0 : !Int, o#1 : ?Int.!Int :].
  split l [: l#0 : !Int, l#1 : !Int.!Int :].
  let x#i#0 : Int <- i#0.
  o#0 <- x#i#0.
  l#0 <- x#i#0.
  let x#o#1 : Int <- o#1.
  i#1 <- x#o#1.
  l#1 <- x#o#1.
  let x#i#1 : Int <- i#1.
  o#1 <- x#i#1.
  l#1 <- x#i#1

fwd_ten2_par2 =
  proc (i : [?Int, !Int.?Int],o : {!Int, ?Int.!Int})
  split i [i#0 : ?Int, i#1 : !Int.?Int].
  split o {o#0 : !Int, o#1 : ?Int.!Int}.
  let x#i#0 : Int <- i#0.
  let x#o#1 : Int <- o#1.
  o#0 <- x#i#0.
  i#1 <- x#o#1.
  let x#i#1 : Int <- i#1.
  o#1 <- x#i#1

split_nested_seq_core =
  \ (A : Session)-> \ (B : Session)-> \ (C : Session)-> \ (D : Session)-> proc (i : [: ~ A, ~ B, ~ C, ~ D :], o : [: [: A, B :], [: C, D :] :])
  split i [: na, nb, nc, nd :].
  split o [: ab, cd :].
  split ab [: a, b :].
  split cd [: c, d :].
  fwd A (a, na).
  fwd B (b, nb).
  fwd C (c, nc).
  fwd D (d, nd)

group_nested_seq : (A : Session)-> (B : Session)-> (C : Session)-> (D : Session)-> < {[: [: ~ A, ~ B :], [: ~ C, ~ D :] :], [: A, B, C, D :]}> =
  \ (A : Session)-> \ (B : Session)-> \ (C : Session)-> \ (D : Session)-> proc (c : {[: [: ~ A, ~ B :], [: ~ C, ~ D :] :], [: A, B, C, D :]})
  split c {i, o}.
  split o [: na, nb, nc, nd :].
  split i [: ab, cd :].
  split ab [: a, b :].
  split cd [: c, d :].
  fwd (~ A)(a, na).
  fwd (~ B)(b, nb).
  fwd (~ C)(c, nc).
  fwd (~ D)(d, nd)

group_nested_seq_SInt_SDouble_SBool_SString =
  proc (c : {[: [: ?Int, ?Double :], [: ?Bool, ?String :] :], [: !Int, !Double, !Bool, !String :]})
  split c {i, o}.
  split o [: na, nb, nc, nd :].
  split i [: ab, cd :].
  split ab [: a, b :].
  split cd [: c, d :].
  fwd (?Int)(a, na).
  fwd (?Double)(b, nb).
  fwd (?Bool)(c, nc).
  fwd (?String)(d, nd)

id : (A : Type)-> (x : A)-> A

idproc =
  proc (c : ?Int, d : !Int)
  let y : Int <- c.
  d <- (id Int y)

assert
  42
  =
  let x = 42 in x

i42 : Int =
  42

one : Int =
  1

suc : (x : Int)-> Int =
  _+_ 1

doubleInt : (x : Int)-> Int =
  \ (x : Int)-> x + x

data ABC = `a | `b | `c

rot : (x : ABC)-> ABC =
  \ (x : ABC)-> case x of {
    `a -> `b ,
    `b -> `c ,
    `c -> `a
  }

rot2 : (x : ABC)-> ABC =
  \ (x : ABC)-> case case x of {
    `a -> `b ,
    `b -> `c ,
    `c -> `a
  } of {
    `a -> `b ,
    `b -> `c ,
    `c -> `a
  }

let42ann =
  84

let42 =
  84

let_example =
  proc (c : ?Int.!Int)
  let x : Int <- c.
  c <- (x + x)

letrecv_ann =
  proc (c : ?Int.!Int)
  let x : Int <- c.
  c <- (x + x)

letrecv =
  proc (c : ?Int.!Int)
  let x : Int <- c.
  c <- (x + x)

letsession =
  proc (c)
  split c {c#0 : {{{{{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}},{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}}}, {{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}},{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}}}},{{{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}},{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}}}, {{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}},{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}}}}}, {{{{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}},{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}}}, {{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}},{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}}}},{{{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}},{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}}}, {{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}},{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}}}}}},c#1 : [[[[[[[!Int, !Int],[!Int, !Int]], [[!Int, !Int],[!Int, !Int]]],[[[!Int, !Int],[!Int, !Int]], [[!Int, !Int],[!Int, !Int]]]], [[[[!Int, !Int],[!Int, !Int]], [[!Int, !Int],[!Int, !Int]]],[[[!Int, !Int],[!Int, !Int]], [[!Int, !Int],[!Int, !Int]]]]],[[[[[!Int, !Int],[!Int, !Int]], [[!Int, !Int],[!Int, !Int]]],[[[!Int, !Int],[!Int, !Int]], [[!Int, !Int],[!Int, !Int]]]], [[[[!Int, !Int],[!Int, !Int]], [[!Int, !Int],[!Int, !Int]]],[[[!Int, !Int],[!Int, !Int]], [[!Int, !Int],[!Int, !Int]]]]]], [[[[[[!Int, !Int],[!Int, !Int]], [[!Int, !Int],[!Int, !Int]]],[[[!Int, !Int],[!Int, !Int]], [[!Int, !Int],[!Int, !Int]]]], [[[[!Int, !Int],[!Int, !Int]], [[!Int, !Int],[!Int, !Int]]],[[[!Int, !Int],[!Int, !Int]], [[!Int, !Int],[!Int, !Int]]]]],[[[[[!Int, !Int],[!Int, !Int]], [[!Int, !Int],[!Int, !Int]]],[[[!Int, !Int],[!Int, !Int]], [[!Int, !Int],[!Int, !Int]]]], [[[[!Int, !Int],[!Int, !Int]], [[!Int, !Int],[!Int, !Int]]],[[[!Int, !Int],[!Int, !Int]], [[!Int, !Int],[!Int, !Int]]]]]]]}.
  fwd {{{{{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}},{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}}}, {{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}},{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}}}},{{{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}},{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}}}, {{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}},{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}}}}}, {{{{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}},{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}}}, {{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}},{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}}}},{{{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}},{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}}}, {{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}},{{{?Int, ?Int},{?Int, ?Int}}, {{?Int, ?Int},{?Int, ?Int}}}}}}}(c#0, c#1)

lettype : (P : (A : Type)-> (B : Type)-> Type)-> (p : (A : Type)-> P A A)-> (A : Type)-> P (P (P (P A A)(P A A)) (P (P A A)(P A A)))(P (P (P A A)(P A A)) (P (P A A)(P A A)))=
  \ (P : (A : Type)-> (B : Type)-> Type)-> \ (p : (A : Type)-> P A A)-> \ (A : Type)-> p (P (P (P A A)(P A A)) (P (P A A)(P A A)))

assert
  1
  =
  let f = \ (x : Int)-> x in f (f 1): Int

showMult =
  \ (m : Int)-> \ (n : Int)-> (showInt m)++S " * " ++S (showInt n)++S " = " ++S showInt (m * n)

showDiv =
  \ (m : Double)-> \ (n : Double)-> (showDouble m)++S " / " ++S (showDouble n)++S " = " ++S showDouble (m /D n)

my42 : String =
  "2 * 21 = 42"

my3_14 : String =
  "6.28 / 2.0 = 3.14"

myNewline : Char =
  '\n'

merger =
  \ (m : Int)-> \ (n : Int)-> proc (c0 : [!Vec Int m, ?Vec Int m],c1 : [!Vec Int n, ?Vec Int n],ci : ?Vec Int (m + n),co : !Vec Int (m + n))
  split c0 [c0i, c0o].
  split c1 [c1i, c1o].
  let vi : Vec Int (m + n)<- ci.
  ( c0i <- (take Int m n vi)
  | c1i <- (drop Int m n vi)
  | let v0 : Vec Int m <- c0o.
    let v1 : Vec Int n <- c1o.
    co <- (merge m n v0 v1))

merger_loli_Sort =
  \ (m : Int)-> \ (n : Int)-> proc (c : {[~ DotSort Int m, ~ DotSort Int n],DotSort Int (m + n)})
  split c {c01, d}.
  split c01 [c0, c1].
  let vi : Vec Int (m + n)<- d.
  ( c0 <- (take Int m n vi)
  | c1 <- (drop Int m n vi)).
  ( let v0 : Vec Int m <- c0
  | let v1 : Vec Int n <- c1 ).
  d <- (merge m n v0 v1)

merger_nstSort_prll =
  \ (m : Int)-> \ (n : Int)-> proc (c0 : ~ DotSort Int m, c1 : ~ DotSort Int n, c : DotSort Int (m + n))
  let vi : Vec Int (m + n)<- c.
  ( c0 <- (take Int m n vi)
  | c1 <- (drop Int m n vi)).
  ( let v0 : Vec Int m <- c0
  | let v1 : Vec Int n <- c1 ).
  c <- (merge m n v0 v1)

merger_nstSort_prll_v2 =
  \ (m : Int)-> \ (n : Int)-> proc (c : [~ DotSort Int m, ~ DotSort Int n],d : DotSort Int (m + n))
  split c [c0, c1].
  let vi : Vec Int (m + n)<- d.
  ( c0 <- (take Int m n vi)
  | c1 <- (drop Int m n vi)).
  ( let v0 : Vec Int m <- c0
  | let v1 : Vec Int n <- c1 ).
  d <- (merge m n v0 v1)

merger_ParSort_full_prll =
  \ (m : Int)-> \ (n : Int)-> proc (c0 : ~ ParSort Int m, c1 : ~ ParSort Int n, c : ParSort Int (m + n))
  split c0 [c0i, c0o].
  split c1 [c1i, c1o].
  split c {ci, co}.
  let vi : Vec Int (m + n)<- ci.
  ( c0i <- (take Int m n vi)
  | c1i <- (drop Int m n vi)
  | ( let v0 : Vec Int m <- c0o
    | let v1 : Vec Int n <- c1o ).
    co <- (merge m n v0 v1))

merger_seq_inferred =
  \ (m : Int)-> \ (n : Int)-> proc (c0, c1, ci, co)
  let vi : Vec Int (m + n)<- ci.
  c0 <- (take Int m n vi).
  c1 <- (drop Int m n vi).
  let v0 : Vec Int m <- c0.
  let v1 : Vec Int n <- c1.
  co <- (merge m n v0 v1)

merger_seq =
  \ (m : Int)-> \ (n : Int)-> proc (c0 : !Vec Int m.?Vec Int m, c1 : !Vec Int n.?Vec Int n, ci : ?Vec Int (m + n),co : !Vec Int (m + n))
  let vi : Vec Int (m + n)<- ci.
  c0 <- (take Int m n vi).
  c1 <- (drop Int m n vi).
  let v0 : Vec Int m <- c0.
  let v1 : Vec Int n <- c1.
  co <- (merge m n v0 v1)

merger_seq_Sort =
  \ (m : Int)-> \ (n : Int)-> proc (c : {{~ DotSort Int m, ~ DotSort Int n},DotSort Int (m + n)})
  split c {d, io}.
  split d {d0, d1}.
  let vi : Vec Int (m + n)<- io.
  d0 <- (take Int m n vi).
  d1 <- (drop Int m n vi).
  let v0 : Vec Int m <- d0.
  let v1 : Vec Int n <- d1.
  io <- (merge m n v0 v1)

merger_seqential_ten2_loli_Sort =
  \ (m : Int)-> \ (n : Int)-> proc (c : {{~ DotSort Int m, ~ DotSort Int n},DotSort Int (m + n)})
  split c {c01, d}.
  split c01 {c0, c1}.
  let vi : Vec Int (m + n)<- d.
  c0 <- (take Int m n vi).
  c1 <- (drop Int m n vi).
  let v0 : Vec Int m <- c0.
  let v1 : Vec Int n <- c1.
  d <- (merge m n v0 v1)

merger_ten2_loli_Sort =
  \ (m : Int)-> \ (n : Int)-> proc (c : {{~ DotSort Int m, ~ DotSort Int n},DotSort Int (m + n)})
  split c {c01, d}.
  split c01 {c0, c1}.
  let vi : Vec Int (m + n)<- d.
  ( c0 <- (take Int m n vi)
  | c1 <- (drop Int m n vi)).
  ( let v0 : Vec Int m <- c0
  | let v1 : Vec Int n <- c1 ).
  d <- (merge m n v0 v1)

mk_new_ann =
  \ (ann : Allocation)-> \ (S : Session)-> \ (p : < S >)-> \ (q : < ~ S >)-> proc ()
  new/ann [c : S, d : ~ S].
  ( @ p (c)
  | @ q (d))

mk_par2_LR =
  \ (S0 : Session)-> \ (S1 : Session)-> \ (p0 : < S0 >)-> \ (p1 : < S1 >)-> proc (c : {S0, S1})
  split c {c0, c1}.
  @ p0 (c0).
  @ p1 (c1)

mk_par2_prll =
  \ (S0 : Session)-> \ (S1 : Session)-> \ (p0 : < S0 >)-> \ (p1 : < S1 >)-> proc (c : {S0, S1})
  split c {c0, c1}.
  ( @ p0 (c0)
  | @ p1 (c1))

mk_par2_RL =
  \ (S0 : Session)-> \ (S1 : Session)-> \ (p0 : < S0 >)-> \ (p1 : < S1 >)-> proc (c : {S0, S1})
  split c {c0, c1}.
  @ p1 (c1).
  @ p0 (c0)

mk_seq2 =
  \ (S0 : Session)-> \ (S1 : Session)-> \ (p0 : < S0 >)-> \ (p1 : < S1 >)-> proc (c : [: S0, S1 :])
  split c [: c0, c1 :].
  @ p0 (c0).
  @ p1 (c1)

mk_ten2_2new_2fwd =
  \ (S0 : Session)-> \ (S1 : Session)-> \ (p0 : < S0 >)-> \ (p1 : < S1 >)-> proc (c : [S0, S1])
  split c [c0, c1].
  new [d0 : ~ S0, e0 : S0].
  new [d1 : ~ S1, e1 : S1].
  ( @ p0 (e0)
  | fwd S0 (c0, d0)
  | @ p1 (e1)
  | fwd S1 (c1, d1))

mk_tensor2 =
  \ (S0 : Session)-> \ (S1 : Session)-> \ (p0 : < S0 >)-> \ (p1 : < S1 >)-> proc (c : [S0, S1])
  split c [c0, c1].
  ( @ p0 (c0)
  | @ p1 (c1))

assert
  ?(A : Type).?(B : Type).?(C : Type)
  =
  ?(A : Type).?(B : Type).?(C : Type): Session

my_dual =
  \ (S : Session)-> ~ S

test_my_dual =
  proc (c : ?Int)
  let x : Int <- c

my_loli =
  \ (S : Session)-> \ (T : Session)-> {~ S, T}

test_my_loli =
  \ (A : Type)-> proc (c : {?A, !A})
  split c {i, o}.
  let x : A <- i.
  o <- x

new_alloc =
  proc (c : !Int)
  new/alloc [d : !Int, e].
  d <- 1.
  let x#e : Int <- e.
  c <- x#e

new_fuse1_recv_send_send_recv =
  proc ()
  new/fuse 1 [d : ?Int.!Int, c : !Int.?Int].
  c <- 1.
  let y : Int <- d.
  d <- 2.
  let x : Int <- c

new_ann_ten_recv =
  \ (ann : Allocation)-> proc ()
  new/ann [c : [!Int, ?Int],d : {?Int, !Int}].
  ( split c [co, ci].
    ( co <- 42
    | let y : Int <- ci )
  | split d {di, do}.
    let x : Int <- di.
    do <- (x + x))

new_fuse1_ten_recv =
  proc ()
  new/fuse 1 [c : [!Int, ?Int],d : {?Int, !Int}].
  split c [co, ci].
  split d {di, do}.
  co <- 42.
  let x : Int <- di.
  do <- (x + x).
  let y : Int <- ci

new_fuse2_ten_recv =
  proc ()
  new/fuse 2 [c : [!Int, ?Int],d : {?Int, !Int}].
  split c [co, ci].
  split d {di, do}.
  co <- 42.
  let x : Int <- di.
  do <- (x + x).
  let y : Int <- ci

new_fuse3_ten_recv =
  proc ()
  new/fuse 3 [c : [!Int, ?Int],d : {?Int, !Int}].
  split c [co, ci].
  split d {di, do}.
  co <- 42.
  let x : Int <- di.
  do <- (x + x).
  let y : Int <- ci

new_fused_ten_recv =
  proc ()
  new/fused [c : [!Int, ?Int],d : {?Int, !Int}].
  split c [co, ci].
  split d {di, do}.
  co <- 42.
  let x : Int <- di.
  do <- (x + x).
  let y : Int <- ci

no_dead_lock_new_new =
  proc ()
  new [c : ?Int, d].
  new [e : ?Int, f].
  d <- 5.
  let x : Int <- c.
  f <- x.
  let y : Int <- e

no_dead_lock_new_new_v2 =
  proc ()
  new [c : ?Int, d].
  new [e : ?Int, f].
  d <- 5.
  let x : Int <- c.
  f <- x.
  let y : Int <- e

non_dependent_function_type : Int -> Int =
  \ (x : Int)-> x + 1

assert
  (A : Type)-> (a0 : A)-> (B : (a : A)-> Type)-> B a0 -> Type
  =
  (A : Type)-> (a0 : A)-> (B : (a : A)-> Type)-> (b : B a0)-> Type : Type

assert
  (A : Type)-> (a0 : A)-> (B : (a : A)-> Type)-> < ?B a0 >
  =
  (A : Type)-> (a0 : A)-> (B : (a : A)-> Type)-> < ?(b : B a0)> : Type

some_type : Type =
  Int

some_value : some_type =
  42

assert
  (S : Session)-> (m : Int)-> (n : Int)-> < S ^ (m + n)>
  =
  (S : Session)-> (m : Int)-> (n : Int)-> < S ^ (n + m)> : Type

par0 =
  proc (c : {})
  split c {}

par1 =
  proc (c : {!Int})
  split c {d}.
  d <- 42

par2 =
  proc (c : {!Int, ?Int})
  split c {d, e}.
  let x : Int <- e.
  d <- x

par2mix =
  proc (c : {!Int, ?Int})
  split c {d, e}.
  let x : Int <- e.
  d <- 42

par4_seq_send3 =
  proc (a : {[: !Int, !Int :], !Int, !Int, !Int})
  split a {b, e, f, g}.
  split b [: c, d :].
  e <- 1.
  c <- 2.
  f <- 3.
  d <- 4.
  g <- 5

parallel_assoc_2tensor2_left =
  proc (cde : [[!Int, !Int],!Int])
  split cde [cd, e].
  split cd [c, d].
  c <- 1.
  d <- 2.
  e <- 3

parallel_assoc_2tensor2_right =
  proc (cde : [[!Int, !Int],!Int])
  split cde [cd, e].
  split cd [c, d].
  e <- 3.
  c <- 1.
  d <- 2

parallel_assoc_flat =
  proc (c : !Int, d : !Int, e : !Int)
  c <- 1.
  d <- 2.
  e <- 3

parallel_assoc_left =
  proc (c : !Int, d : !Int, e : !Int)
  c <- 1.
  d <- 2.
  e <- 3

parallel_assoc_right =
  proc (c : !Int, d : !Int, e : !Int)
  c <- 1.
  d <- 2.
  e <- 3

parallel_assoc_tensor3_flat =
  proc (cde : [!Int, !Int, !Int])
  split cde [c, d, e].
  c <- 1.
  d <- 2.
  e <- 3

parallel_assoc_tensor3_left =
  proc (cde : [!Int, !Int, !Int])
  split cde [c, d, e].
  c <- 1.
  d <- 2.
  e <- 3

parallel_assoc_tensor3_right =
  proc (cde : [!Int, !Int, !Int])
  split cde [c, d, e].
  c <- 1.
  d <- 2.
  e <- 3

parallel_tensor4_flat =
  proc (cd : [!Int, !Int],ef : [!Int, !Int])
  split cd [c, d].
  split ef [e, f].
  c <- 1.
  e <- 2.
  d <- 3.
  f <- 4

parallel_tensor4_v0 =
  proc (cd : [!Int, !Int],ef : [!Int, !Int])
  split cd [c, d].
  split ef [e, f].
  c <- 1.
  e <- 2.
  d <- 3.
  f <- 4

par_comm =
  \ (A : Session)-> \ (B : Session)-> proc (c : {[~ A, ~ B],{B, A}})
  split c {i, o}.
  split i [na, nb].
  split o {b, a}.
  ( fwd A (a, na)
  | fwd B (b, nb))

par_loli_ten_send =
  \ (S : Type)-> \ (T : Type)-> proc (c : {[?S, ?T],[!S, !T]})
  split c {i, o}.
  split i [rs, rt].
  split o [ss, st].
  ( let vs : S <- rs
  | let vt : T <- rt ).
  ( ss <- vs
  | st <- vt )

par_loli_ten_send_v2 =
  \ (S : Type)-> \ (T : Type)-> proc (c : {[?S, ?T],[!S, !T]})
  split c {i, o}.
  split i [rs, rt].
  ( let vs : S <- rs
  | let vt : T <- rt ).
  split o [ss, st].
  ( ss <- vs
  | st <- vt )

par_seq_back =
  proc (a : {[: !Int, !Int :], !Int})
  split a {b, e}.
  split b [: c, d :].
  c <- 2.
  d <- 3.
  e <- 1

par_seq_front =
  proc (a : {[: !Int, !Int :], !Int})
  split a {b, e}.
  split b [: c, d :].
  e <- 1.
  c <- 2.
  d <- 3

par_seq_middle =
  proc (a : {[: !Int, !Int :], !Int})
  split a {b, e}.
  split b [: c, d :].
  c <- 2.
  e <- 1.
  d <- 3

par_seq_send3 =
  proc (a : {[: !Int, !Int :], !Int.!Int.!Int})
  split a {b, e}.
  split b [: c, d :].
  e <- 1.
  c <- 2.
  e <- 3.
  d <- 4.
  e <- 5

par_ten1_ten1 =
  proc (c : {[?Int],[!Int]})
  split c {e, d}.
  split d [l].
  split e [h].
  let x : Int <- h.
  l <- x

par_ten_ten_v0 =
  proc (c : {[?Int, !Int],[!Int, ?Int]})
  split c {e, d}.
  split d [k, l].
  split e [h, g].
  let x : Int <- h.
  k <- 1.
  let y : Int <- l.
  g <- 2

par_ten_ten_v1 =
  proc (c : {[?Int, !Int],[!Int, ?Int]})
  split c {e, d}.
  split d [k, l].
  split e [h, g].
  let x : Int <- h.
  k <- 1.
  let y : Int <- l.
  g <- 2

par_ten_ten_v2 =
  proc (c : {[?Int, !Int],[!Int, ?Int]})
  split c {e, d}.
  split d [k, l].
  split e [h, g].
  k <- 1.
  let x : Int <- h.
  let y : Int <- l.
  g <- 2

pattern_example_expanded =
  proc (abcde : [!Int, [: !Int, !Int :], {[!Int, !Int],{?Int, ?Int}}])
  split abcde [a, bc, de].
  split bc [: b, c :].
  split de {d, e}.
  a <- 1.
  b <- 2.
  split d [d#0 : !Int, d#1 : !Int].
  c <- 3.
  split e {e#0 : ?Int, e#1 : ?Int}.
  let x#e#0 : Int <- e#0.
  let x#e#1 : Int <- e#1.
  d#0 <- x#e#0.
  d#1 <- x#e#1

plug_compose =
  \ (A : Session)-> \ (B : Session)-> \ (C : Session)-> \ (p : < A, B >)-> \ (q : < ~ B, C >)-> proc (a : A, c : C)
  new [b : B, b' : ~ B].
  ( @ p {a, b}
  | @ q {b', c})

flat_par' =
  \ (A : Session)-> \ (B : Session)-> \ (p : < {A, B}>)-> proc (a : A, b : B)
  new [ab : {A, B},nanb].
  ( @ p (ab)
  | split nanb [na, nb].
    ( fwd A (a, na)
    | fwd B (b, nb)))

bump_par' =
  \ (A : Session)-> \ (B : Session)-> \ (p : < A, B >)-> proc (ab : {A, B})
  split ab {a, b}.
  @ p {a, b}

plug_compose' =
  \ (A : Session)-> \ (B : Session)-> \ (C : Session)-> \ (p : < A, B >)-> \ (q : < ~ B, C >)-> proc (a : A, c : C)
  new [b : B, b' : ~ B].
  ( @ p {a, b}
  | @ q {b', c})

plug_compose_par_par : (A : Session)-> (B : Session)-> (C : Session)-> (p : < {A, B}>)-> (q : < {~ B, C}>)-> < {A, C}> =
  \ (A : Session)-> \ (B : Session)-> \ (C : Session)-> \ (p : < {A, B}>)-> \ (q : < {~ B, C}>)-> proc (ab : {A, C})
  split ab {a, b}.
  new [b : B, b' : ~ B].
  ( new [ab : {A, B},nanb].
    ( @ p (ab)
    | split nanb [na, nb].
      ( fwd A (a, na)
      | fwd B (b, nb)))
  | new [ab : {~ C, C},nanb].
    ( @ q (ab)
    | split nanb [na, nb].
      ( fwd (~ C)(b', na)
      | fwd C (b, nb))))

plug_send_recv =
  \ (p : < !Int, ?Int >)-> proc (c : !Int, d : ?Int)
  @ p {c, d}

_ =
  1

_ =
  2

_ =
  "Hello!"

assert
  16 % 33
  =
  16

assert
  30 + 2
  =
  32

assert
  86 - 22
  =
  64

assert
  4 * 32
  =
  128

assert
  512 / 2
  =
  256

assert
  pow 2 9
  =
  512

assert
  3.03 +D 0.11000000000000032
  =
  3.14

assert
  3.28 -D 0.13999999999999968
  =
  3.14

assert
  6.28 *D 0.5
  =
  3.14

assert
  1.57 /D 0.5
  =
  3.14

assert
  powD 0.1 1.0e-3
  =
  0.9977000638225533

assert
  Int2Double 42
  =
  42.0

assert
  showInt 42
  =
  "42"

assert
  showDouble 3.14
  =
  "3.14"

assert
  showChar 'a'
  =
  "'a'"

assert
  showString "Hello \"World\"!"
  =
  "\"Hello \\\"World\\\"!\""

assert
  "Hello " ++S "World!"
  =
  "Hello World!"

replicate =
  \ (A : Type)-> \ (n : Int)-> \ (x : A)-> proc (os : [!A ^ n])
  split os [o ^ n].
  slice (o)n as _
    o <- x

replicate_par =
  proc (c : {!Int ^ 10})
  split c {d ^ 10}.
  slice (d)10 as i
    d <- i

replicate_proc =
  \ (A : Type)-> \ (n : Int)-> proc (c : {?A, [!A ^ n]})
  split c {i, os}.
  split os [o ^ n].
  slice (o)n as _
    let x#i : A <- i.
    o <- x#i

replicate_proc_Int_10 =
  proc (c : {?Int, [!Int ^ 10]})
  split c {i, os}.
  split os [o ^ 10].
  slice (o)10 as _
    let x#i : Int <- i.
    o <- x#i

replicate_proc_alt =
  \ (A : Type)-> \ (n : Int)-> proc (c : {?A, [!A ^ n]})
  split c {i, os}.
  let x : A <- i.
  split os [o ^ n].
  slice (o)n as _
    new [j : ?A, k].
    ( let x#j : A <- j.
      o <- x#j
    | k <- x )

replicate_proc_alt_Int_10 =
  proc (c : {?Int, [!Int ^ 10]})
  split c {i, os}.
  let x : Int <- i.
  split os [o ^ 10].
  slice (o)10 as _
    new [j : ?Int, k].
    k <- x.
    let x#j : Int <- j.
    o <- x#j

replicate_ten =
  proc (c : [!Int ^ 10])
  split c [d ^ 10].
  slice (d)10 as i
    d <- i

Int1 =
  Int

send_1 =
  proc (c : !Int)
  c <- 1

seq0_explicit =
  proc (c : [: :])
  split c [: :]

seq0 =
  proc (c : [: :])
  ( )

seq3 =
  proc (c : [: !Int, !Int, !Int :])
  split c [: c0, c1, c2 :].
  c0 <- 0.
  c1 <- 1.
  c2 <- 2

seq3_seq2 =
  proc (c : [: !Int, !Int, !Int :], d : [: !Int, !Int :])
  split c [: c0, c1, c2 :].
  split d [: d0, d1 :].
  c0 <- 0.
  c1 <- 1.
  d0 <- 0.
  c2 <- 2.
  d1 <- 1

seq_assoc_core =
  \ (A : Session)-> \ (B : Session)-> \ (C : Session)-> proc (i : [: [: ~ A, ~ B :], ~ C :], o : [: A, [: B, C :] :])
  split i [: nab, nc :].
  split nab [: na, nb :].
  split o [: a, bc :].
  split bc [: b, c :].
  fwd A (a, na).
  fwd B (b, nb).
  fwd C (c, nc)

seq_par_back =
  proc (a : [: {!Int, !Int},!Int :])
  split a [: b, e :].
  split b {c, d}.
  c <- 2.
  d <- 3.
  e <- 1

seq_par_back_v2 =
  proc (a : [: {!Int, !Int},!Int :])
  split a [: b, e :].
  split b {c, d}.
  d <- 3.
  c <- 2.
  e <- 1

seq_seq =
  proc (a : [: [: !Int, !Int :], !Int :])
  split a [: b, e :].
  split b [: c, d :].
  c <- 1.
  d <- 2.
  e <- 3

seq_seq_send2 =
  proc (a : [: [: !Int.!Int, !Int.!Int :], !Int.!Int :])
  split a [: b, e :].
  split b [: c, d :].
  c <- 1.
  c <- 2.
  d <- 3.
  d <- 4.
  e <- 5.
  e <- 6

seq_ten =
  proc (a : [: [!Int, !Int],!Int :])
  split a [: b, e :].
  split b [c, d].
  c <- 2.
  d <- 3.
  e <- 1

singleRecv =
  proc (c : ?Int)
  let x : Int <- c

singleSend =
  proc (c : !Int)
  c <- 42

sorter =
  \ (n : Int)-> proc (c : {?Vec Int n, !Vec Int n})
  split c {ci, co}.
  let v : Vec Int n <- ci.
  co <- (sort n v)

split_fwd1_rcv =
  proc (c : {?Int})
  split c {d}.
  let x#d : Int <- d

split_nested_seq : (A : Session)-> (B : Session)-> (C : Session)-> (D : Session)-> < {[: ~ A, ~ B, ~ C, ~ D :], [: [: A, B :], [: C, D :] :]}> =
  \ (A : Session)-> \ (B : Session)-> \ (C : Session)-> \ (D : Session)-> proc (c : {[: ~ A, ~ B, ~ C, ~ D :], [: [: A, B :], [: C, D :] :]})
  split c {i, o}.
  split i [: na, nb, nc, nd :].
  split o [: ab, cd :].
  split ab [: a, b :].
  split cd [: c, d :].
  fwd A (a, na).
  fwd B (b, nb).
  fwd C (c, nc).
  fwd D (d, nd)

sum_int =
  proc (a : {?Int ^ 10},r : !Int)
  new/alloc [itmp : !Int.?Int, tmp].
  itmp <- 0.
  split a {ai ^ 10}.
  (slice (ai)10 as i
    let x : Int <- ai.
    let y : Int <- tmp.
    tmp <- (x + y)).
  let x#itmp : Int <- itmp.
  r <- x#itmp

switch : (A : Session)-> (B : Session)-> (C : Session)-> < {{~ A, [~ B, ~ C]}, {[A, B],C}} > =
  \ (A : Session)-> \ (B : Session)-> \ (C : Session)-> proc (c : {{~ A, [~ B, ~ C]}, {[A, B],C}})
  split c {i, o}.
  split i {na, nbc}.
  split nbc [nb, nc].
  split o {ab, c}.
  split ab [a, b].
  ( fwd A (a, na)
  | fwd B (b, nb)
  | fwd C (c, nc))

ten_loli_par =
  \ (A : Session)-> \ (B : Session)-> proc (c : {{~ A, ~ B},{A, B}})
  split c {i, o}.
  split i {na, nb}.
  split o {a, b}.
  ( fwd A (a, na)
  | fwd B (b, nb))

ten_loli_par_sInt_sDouble =
  proc (c : {{?Int, ?Double},{!Int, !Double}})
  split c {i, o}.
  split i {na, nb}.
  split o {a, b}.
  fwd (!Int)(a, na).
  fwd (!Double)(b, nb)

ten_loli_par_sequential =
  \ (A : Session)-> \ (B : Session)-> proc (c : {{~ A, ~ B},{A, B}})
  split c {i, o}.
  split i {na, nb}.
  split o {a, b}.
  fwd A (a, na).
  fwd B (b, nb)

ten_par_par_split =
  proc (c : [{}, {}])
  split c [d, e].
  split d {}.
  split e {}

tensor0 =
  proc (c : [])
  split c []

tensor1 =
  proc (c : [!Int])
  split c [d].
  d <- 42

tensor2 =
  proc (c : [!Int, ?Int])
  split c [d, e].
  let x : Int <- e.
  d <- 42

tensor2_tensor0_tensor0_parallel =
  proc (cd : [[], []])
  split cd [c, d].
  split c [].
  split d []

tensor2_tensor0_tensor0_sequence =
  proc (cd : [[], []])
  split cd [c, d].
  split c [].
  split d []

tensor2_using_dual =
  proc (c : [!Int, ?Int])
  split c [d, e].
  let x : Int <- e.
  d <- 42

test2 =
  proc ()
  new [c : {?Int.!Int.?Int, !Int.?Int.!Int},d].
  split c {c0, c1}.
  split d [d0, d1].
  d0 <- 1.
  let x0 : Int <- c0.
  c1 <- (x0 + 1).
  let z0 : Int <- d1.
  d1 <- (z0 + 5).
  let x1 : Int <- c1.
  c0 <- (x1 + x0 + 2).
  let y0 : Int <- d0.
  d0 <- (y0 + 4).
  let x2 : Int <- c0.
  c1 <- (x2 + x1 + x0 + 3).
  let z1 : Int <- d1

test3 =
  proc ()
  new [c : ?Int.[!Int, !Int],d].
  d <- 1.
  let x0 : Int <- c.
  split d {d0, d1}.
  split c [c0, c1].
  c0 <- x0.
  c1 <- x0.
  let y0 : Int <- d0.
  let z0 : Int <- d1

test4 =
  proc (r : !Int)
  new [c : ?Int.?Int.?Int, d].
  d <- 1.
  let x0 : Int <- c.
  d <- 2.
  let x1 : Int <- c.
  d <- 3.
  let x2 : Int <- c.
  r <- (x0 + x1 + x2)

type_annotation =
  42

ZeroCh : Type =
  (A : Type)-> A

One : Type =
  (A : Type)-> (x : A)-> A

zeroOne : One =
  \ (A : Type)-> \ (x : A)-> x

Two : Type =
  (A : Type)-> (x : A)-> (y : A)-> A

zeroTwo : Two =
  \ (A : Type)-> \ (x : A)-> \ (y : A)-> x

oneTwo : Two =
  \ (A : Type)-> \ (x : A)-> \ (y : A)-> y

notTwo : (b : Two)-> Two =
  \ (b : (A : Type)-> (x : A)-> (y : A)-> A)-> \ (A : Type)-> \ (x : A)-> \ (y : A)-> b A y x

andTwo : (b0 : Two)-> (b1 : Two)-> Two =
  \ (b0 : (A : Type)-> (x : A)-> (y : A)-> A)-> \ (b1 : (A : Type)-> (x : A)-> (y : A)-> A)-> b0 ((A : Type)-> (x : A)-> (y : A)-> A)(\ (A : Type)-> \ (x : A)-> \ (y : A)-> x)b1

orTwo : (b0 : Two)-> (b1 : Two)-> Two =
  \ (b0 : (A : Type)-> (x : A)-> (y : A)-> A)-> \ (b1 : (A : Type)-> (x : A)-> (y : A)-> A)-> b0 ((A : Type)-> (x : A)-> (y : A)-> A)b1 (\ (A : Type)-> \ (x : A)-> \ (y : A)-> y)

Nat : Type =
  (A : Type)-> (z : A)-> (s : (n : A)-> A)-> A

zeroNat : Nat =
  \ (A : Type)-> \ (z : A)-> \ (s : (n : A)-> A)-> z

sucNat : (n : Nat)-> Nat =
  \ (n : (A : Type)-> (z : A)-> (s : (n : A)-> A)-> A)-> \ (A : Type)-> \ (z : A)-> \ (s : (m : A)-> A)-> s (n A z s)

addNat : (m : Nat)-> (n : Nat)-> Nat =
  \ (m : (A : Type)-> (z : A)-> (s : (n : A)-> A)-> A)-> \ (n : (A : Type)-> (z : A)-> (s : (n : A)-> A)-> A)-> m ((A : Type)-> (z : A)-> (s : (n : A)-> A)-> A)n (\ (n : (A : Type)-> (z : A)-> (s : (n : A)-> A)-> A)-> \ (A : Type)-> \ (z : A)-> \ (s : (m : A)-> A)-> s (n A z s))

Bin : Type =
  (A : Type)-> (leaf : A)-> (fork : (left : A)-> (right : A)-> A)-> A

Nats : Type =
  (A : Type)-> (nil : A)-> (cons : (head : (A : Type)-> (z : A)-> (s : (n : A)-> A)-> A)-> (tail : A)-> A)-> A

List : (X : Type)-> Type =
  \ (X : Type)-> (A : Type)-> (nil : A)-> (cons : (head : X)-> (tail : A)-> A)-> A

nilList : (X : Type)-> List X =
  \ (X : Type)-> \ (A : Type)-> \ (nil : A)-> \ (cons : (head : X)-> (tail : A)-> A)-> nil

consList : (X : Type)-> (head : X)-> (tail : List X)-> List X =
  \ (X : Type)-> \ (head : X)-> \ (tail : (A : Type)-> (nil : A)-> (cons : (head : X)-> (tail : A)-> A)-> A)-> \ (A : Type)-> \ (nil : A)-> \ (cons : (head' : X)-> (tail' : A)-> A)-> cons head (tail A nil cons)

mapList : (X : Type)-> (Y : Type)-> (f : (x : X)-> Y)-> (xs : List X)-> List Y =
  \ (X : Type)-> \ (Y : Type)-> \ (f : (x : X)-> Y)-> \ (xs : (A : Type)-> (nil : A)-> (cons : (head : X)-> (tail : A)-> A)-> A)-> \ (A : Type)-> \ (nil : A)-> \ (cons : (head' : Y)-> (tail' : A)-> A)-> xs A nil (\ (head : X)-> \ (tail : A)-> cons (f head)tail)

Id : (A : Type)-> (x : A)-> (y : A)-> Type

refl : (A : Type)-> (x : A)-> Id A x x

J : (A : Type)-> (x : A)-> (P : (y : A)-> (p : Id A x y)-> Type)-> (Px : P x (refl A x)) -> (y : A)-> (p : Id A x y)-> P y p

J-refl : (A : Type)-> (x : A)-> (P : (y : A)-> (p : Id A x y)-> Type)-> (Px : P x (refl A x)) -> Id (P x (refl A x)) (J A x P Px x (refl A x)) Px

tr : (A : Type)-> (x : A)-> (P : (y : A)-> Type)-> (Px : P x)-> (y : A)-> (p : Id A x y)-> P y =
  \ (A : Type)-> \ (x : A)-> \ (P : (y : A)-> Type)-> \ (Px : P x)-> \ (y : A)-> \ (p : Id A x y)-> J A x (\ (z : A)-> \ (q : Id A x z)-> P z)Px y p

tr-refl : (A : Type)-> (x : A)-> (P : (y : A)-> Type)-> (Px : P x)-> Id (P x)(tr A x P Px x (refl A x)) Px =
  \ (A : Type)-> \ (x : A)-> \ (P : (y : A)-> Type)-> \ (Px : P x)-> J-refl A x (\ (z : A)-> \ (q : Id A x z)-> P z)Px

coe : (A : Type)-> (B : Type)-> (p : Id Type A B)-> (x : A)-> B =
  \ (A : Type)-> \ (B : Type)-> \ (p : Id Type A B)-> \ (x : A)-> J Type A (\ (z : Type)-> \ (q : Id Type A z)-> z)x B p

coe-refl : (A : Type)-> (x : A)-> Id A (coe A A (refl Type A)x)x =
  \ (A : Type)-> \ (x : A)-> J-refl Type A (\ (z : Type)-> \ (q : Id Type A z)-> z)x

sym : (A : Type)-> (x : A)-> (y : A)-> (p : Id A x y)-> Id A y x =
  \ (A : Type)-> \ (x : A)-> \ (y : A)-> \ (p : Id A x y)-> J A x (\ (z : A)-> \ (q : Id A x z)-> Id A z x)(refl A x)y p

trans : (A : Type)-> (x : A)-> (y : A)-> (z : A)-> (p : Id A x y)-> (q : Id A y z)-> Id A x z =
  \ (A : Type)-> \ (x : A)-> \ (y : A)-> \ (z : A)-> \ (p : Id A x y)-> \ (q : Id A y z)-> J A z (\ (z : A)-> \ (q : Id A z z)-> Id A x z)q z q

uncurry =
  \ (S : Session)-> \ (T : Session)-> \ (U : Session)-> proc (c : {[S, [T, ~ U]], {{~ S, ~ T},U}})
  split c {f, xyo}.
  split xyo {xy, o}.
  split xy {x, y}.
  split f [fx, fyo].
  split fyo [fy, fo].
  ( fwd S (fx, x)
  | fwd T (fy, y)
  | fwd U (o, fo))

zap =
  \ (S : Session)-> \ (T : Session)-> \ (n : Int)-> proc (c : {{[S, ~ T]^ n},{{~ S ^ n},[T ^ n]}})
  split c {fs, xos}.
  split xos {xs, os}.
  split fs {f ^ n}.
  split xs {x ^ n}.
  split os [o ^ n].
  slice (f, x, o)n as _
    split f [fi, fo].
    ( fwd S (fi, x)
    | fwd T (o, fo))

zap_ten_fwd =
  proc (cf : {{!Int, ?Int}^ 10},cn : {?Int ^ 10},co : [!Int ^ 10])
  split cf {cfi ^ 10}.
  split cn {cni ^ 10}.
  split co [coi ^ 10].
  slice (cfi, cni, coi)10 as i
    split cfi {cfii, cfio}.
    let x#cni : Int <- cni.
    let x#cfio : Int <- cfio.
    cfii <- x#cni.
    coi <- x#cfio

zap_ten_par =
  proc (cf : {{!Int, ?Int}^ 10},cn : {?Int ^ 10},co : [!Int ^ 10])
  split cf {cfi ^ 10}.
  split cn {cni ^ 10}.
  split co [coi ^ 10].
  slice (cfi, cni, coi)10 as i
    split cfi {cfii, cfio}.
    let x : Int <- cni.
    let y : Int <- cfio.
    cfii <- x.
    coi <- y

zap_ten_seq =
  proc (cf : {{!Int, ?Int}^ 10},cn : {?Int ^ 10},co : [!Int ^ 10])
  split cf {cfi ^ 10}.
  split cn {cni ^ 10}.
  split co [coi ^ 10].
  slice (cfi, cni, coi)10 as i
    split cfi {cfii, cfio}.
    let x : Int <- cni.
    cfii <- x.
    let y : Int <- cfio.
    coi <- y

zip_add =
  proc (xs : {?Int ^ 10},ys : {?Int ^ 10},zs : [!Int ^ 10])
  split xs {x ^ 10}.
  split ys {y ^ 10}.
  split zs [z ^ 10].
  slice (x, y, z)10 as i
    let a : Int <- x.
    let b : Int <- y.
    z <- (a + b)
